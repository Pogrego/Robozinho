// GRUPO 5 - SEGUIDOR DE LINHA //
// Autores:
//          Paulo Grego
//          Wellington
//          Murilo
// Ultima modificação: 10/10/2019

//AVISO! NÃO USAR PINOS 5 E 6 DO ARDUINO

// ************* //
//   Pinagem     //
// ************* //

//ponteH(motor1)
#define MOTOR_1A PA2    
#define MOTOR_1B PA3    
#define PWM_1    HIGH
    
//ponteH(motor2)
#define MOTOR_2A PA5     
#define MOTOR_2B PA6    
#define PWM_2    HIGH   
 
//ponteH(motor1)
#define S1  PB3                //Sensor1
#define S2  PB5               //Sensor2
#define S3  PB6                //Sensor3
#define S4  PB8                //Sensor4
#define S5  PB9               //Sensor5
int IR[6];                     //Leituras infravermelho

// ************************* //
//   Constantes e structs    //
// ************************* //
#define TEMPO_DELAY   500      //Constante de tempo
#define VALOR_PWM     255      //Valor de PWM
#define TEMPO_DE_GIRO 200      // 1000 = aprox 90 graus
#define FRENTE HIGH
#define TRAS LOW

typedef struct motor{
  int pinoA, pinoB, pinoPWM;
} Motor;
Motor motorEsq, motorDir;

void inicializa_infravermelho();
void inicializa_motores();
void controlaMotor(Motor motorControlado, boolean sentido);
void frente();
void tras();
void esquerda();
void direita();
void freia();


void setup() 
{
  inicializa_motores();
  inicializa_infravermelho();
}

void loop() 
{
  //leitura dos sensores
  IR[0] = 0;                //erro do sensor
  IR[1] = digitalRead(S1);  //sensor esquerda extrema
  IR[2] = digitalRead(S2);  //sensor esquerda
  IR[3] = digitalRead(S3);  //sensor central
  IR[4] = digitalRead(S4);  //sensor direita
  IR[5] = digitalRead(S5);  //sensor direita  extrema 

//Controle Proporcional
  if(IR[3] == 1 && IR[1] == 0 && IR[2] == 0 && IR[4] == 0 && IR[5] == 0) // seguindo em frente
  {
    IR[0] = 0;
    delay(TEMPO_DELAY); 
  }
  else if((IR[1]==1 || IR[2]==1))
  {
    IR[0] = IR[0] - 1;
    delay(TEMPO_DELAY); 
  }
  else if((IR[1]==1 || IR[2]==1))
  {
    IR[0] = IR[0] + 1;
    delay(TEMPO_DELAY); 
  }
  else if((IR[2]==1 && IR[3]==1) && IR[4]==1)
  { 
    freia();
    IR[0] = 0;
    delay(TEMPO_DELAY); 
  }
// Saida Motores
  if(IR[0] == 0)
    frente();
    else if (IR[0]<0)
      direita();
      else if (IR[0]>0)
        esquerda();
}


  

void inicializa_infravermelho()
{
  pinMode(S1, INPUT);
  pinMode(S2, INPUT);
  pinMode(S3, INPUT);
  pinMode(S4, INPUT);
  pinMode(S5, INPUT);
}
void inicializa_motores()
{
  motorEsq.pinoA = MOTOR_1A;
  motorEsq.pinoB = MOTOR_1B;

  motorDir.pinoA = MOTOR_2A;
  motorDir.pinoB = MOTOR_2B;
  
  pinMode(motorEsq.pinoA, OUTPUT);
  pinMode(motorEsq.pinoB, OUTPUT);
  pinMode(motorEsq.pinoPWM, OUTPUT);
  
  pinMode(motorDir.pinoA, OUTPUT);
  pinMode(motorDir.pinoB, OUTPUT);
  pinMode(motorDir.pinoPWM, OUTPUT);

  analogWrite (motorEsq.pinoPWM, 1);
  analogWrite (motorDir.pinoPWM, 1);
}

void controlaMotor(Motor motorControlado, boolean sentido){
  digitalWrite(motorControlado.pinoA, sentido);
  digitalWrite(motorControlado.pinoB, !(sentido));
}

void frente()
{
  controlaMotor(motorEsq, FRENTE);
  
  controlaMotor(motorDir, FRENTE);
}

void tras()
{
  controlaMotor(motorEsq, TRAS);
  
  controlaMotor(motorDir, TRAS);
}

void esquerda()
{
  controlaMotor(motorEsq, TRAS);
  
  controlaMotor(motorDir, FRENTE);
  
//  delay(TEMPO_DE_GIRO);
}

void direita()
{
  controlaMotor(motorEsq, FRENTE);
  
  controlaMotor(motorDir, TRAS);
  
 // delay(TEMPO_DE_GIRO);
}

void freia()
{
  digitalWrite(MOTOR_1A, LOW);
  digitalWrite(MOTOR_1B, LOW);
  
  digitalWrite(MOTOR_2A, LOW); 
  digitalWrite(MOTOR_2B, LOW);
}
