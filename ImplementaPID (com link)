// sensor infravermelho
const int lineFollowSensor0 = 12;
const int lineFollowSensor1 = 18;
const int lineFollowSensor2 = 17;
const int lineFollowSensor3 = 16;
const int lineFollowSensor4 = 19;
int LFSensor [5] = {0, 0, 0, 0, 0};
//constantes de controle
int Kp = 50; 
int ki = 0;
int kd = 0;

void setup() {
  // put your setup code here, to run once:

}
void loop ()
{
    readLFSsensors (); // Ler sensores, armazenar os valores no Array de sensores e calcular o "erro"
    calculatePID ();
    motorPIDcontrol ();
}
// ****************************** //
//        Leitura dos sensores    //
// ****************************** //
void readLFSsensors ()
{
    LFSensor [0] = digitalRead (lineFollowSensor0);
    LFSensor [1] = digitalRead (lineFollowSensor1);
    LFSensor [2] = digitalRead (lineFollowSensor2);
    LFSensor [3] = digitalRead (lineFollowSensor3);
    LFSensor [4] = digitalRead (lineFollowSensor4);
    
    if ((     LFSensor [0] == 0) && (LFSensor [1] == 0) && (LFSensor [2] == 0) && (LFSensor [3] == 0) && (LFSensor [4] == 1 )) erro =  4;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 0) && (LFSensor [2] == 0) && (LFSensor [3] == 1) && (LFSensor [4] == 1)) erro =   3;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 0) && (LFSensor [2] == 0) && (LFSensor [3] == 1) && (LFSensor [4] == 0)) erro =   2;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 0) && (LFSensor [2] == 1) && (LFSensor [3] == 1) && (LFSensor [4] == 0)) erro =   1;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 0) && (LFSensor [2] == 1) && (LFSensor [3] == 0) && (LFSensor [4] == 0)) erro =   0;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 1) && (LFSensor [2] == 1) && (LFSensor [3] == 0) && (LFSensor [4] == 0)) erro =  -1;
    else if ((LFSensor [0] == 0) && (LFSensor [1] == 1) && (LFSensor [2] == 0) && (LFSensor [3] == 0) && (LFSensor [4] == 0)) erro =  -2;
    else if ((LFSensor [0] == 1) && (LFSensor [1] == 1) && (LFSensor [2] == 0) && (LFSensor [3] == 0) && (LFSensor [4] == 0)) erro =  -3;
    else if ((LFSensor [0] == 1) && (LFSensor [1] == 0) && (LFSensor [2] == 0) && (LFSensor [3] == 0) && (LFSensor [4] == 0)) erro =  -4;
}
// **************************** //
// EXEMPLO: Implementando o P   //
// **************************** //
rightServo.writeMicroseconds (1500 + iniMotorPower - Kp * erro);
leftServo.writeMicroseconds (1500 - iniMotorPower - Kp * erro);
//exemplo
rightServo.writeMicroseconds (1500 + iniMotorPower - erro); // Erro positivo: velocidade diminue leftServo.writeMicroseconds (1500 - iniMotorPower - erro);                                                         //Erro positivo: velocidade aumenta
// ****************** //
//Implementando o PID  //
// ****************** //
void calculatePID ()
{
   P = error;
   I = I + error;
   D = error - previousError;
   PIDvalue = (Kp * P) + (Ki * I) + (Kd * D);
   previousError = error;
}
void motorPIDcontrol ()
{
    int leftMotorSpeed = 1500 - iniMotorPower - PIDvalue;
    int rightMotorSpeed = 1500 + iniMotorPower - PIDvalue;

    leftServo.writeMicroseconds (leftMotorSpeed);
    rightServo.writeMicroseconds (rightMotorSpeed);
}
                                                            
}
// *******************************************************************************************************   //
// Mais detalhes no link abaixo                                                                              //
// http://labdegaragem.com/profiles/blogs/tutorial-rob-seguidor-de-linha-com-controle-pid-e-ajustes-por      //
// ********************************************************************************************************* //
